/*
 * Copyright (c) 2018-2021 Karlatemp and contributors. All rights reserved.
 *
 * Use of this source code is governed by the MIT license that can be found via the following link.
 *
 * https://github.com/KasukuSakura/kasuku-fzos/blob/master/LICENSE
 */

plugins {
    id 'java'
    id 'java-library'
    id 'io.github.karlatemp.publication-sign' version '1.1.0'
    id 'maven-publish'
}

group 'io.github.karlatemp'
version '1.0.0'

repositories {
    mavenCentral()
}

dependencies {
    api 'org.bouncycastle:bcprov-jdk15on:1.68'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    testImplementation 'org.bouncycastle:bcpkix-jdk15on:1.69'
}

test {
    useJUnitPlatform()
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.create("sourcesJar", Jar.class) { tsk ->
    tsk.dependsOn("classes")
    tsk.archiveClassifier.set('sources')
    tsk.from tsk.project.sourceSets.main.allSource
}

tasks.create("javadocJar", Jar.class) { tsk ->
    tsk.archiveClassifier.set('javadoc')
}


publishing {
    repositories {
        maven {
            setName("MavenCentral")
            // Maven Central
            setUrl("https://oss.sonatype.org/service/local/staging/deploy/maven2")

            credentials {
                def prop = { name ->
                    if (rootProject.hasProperty(name)) {
                        return rootProject.property(name)
                    }
                    return ""
                }
                username = prop('sonatype.user')
                password = prop('sonatype.key')
            }

            metadataSources.ignoreGradleMetadataRedirection()
        }

        mavenLocal {
            metadataSources.ignoreGradleMetadataRedirection()
        }

    }

    publications { container ->
        def proj = rootProject
        register("main", MavenPublication.class) { publication ->
            publication.artifactId(proj.name)
            //noinspection GroovyAssignabilityCheck
            publication.from(proj.components.java)

            def sources = proj.tasks.findByName('sourcesJar')
            def javadoc = proj.tasks.findByName('javadocJar')
            if (sources instanceof Jar) {
                publication.artifact sources
            }
            if (javadoc instanceof Jar) {
                publication.artifact javadoc
            }
            publication.setModuleDescriptorGenerator(null)

            publication.pom {
                name = 'MxLib - ' + proj.name
                description = 'MxLib - ' + proj.name
                url = 'https://github.com/Karlatemp/MxLib'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://spdx.org/licenses/MIT.html'
                    }
                }
                developers {
                    developer {
                        name = 'Karlatemp'
                        email = 'karlatemp@vip.qq.com'
                    }
                }
                scm {
                    url = 'https://github.com/Karlatemp/MxLib.git'
                    connection = 'https://github.com/Karlatemp/MxLib.git'
                }
            }
        }

    }
}

publicationSign {
    setupWorkflow { workflow ->
        workflow.fastSetup("keys/key.pub", "keys/key.pri")
    }
}

({
    def buildScan = extensions.findByName('buildScan')
    if (buildScan != null) {
        buildScan.termsOfServiceUrl = "https://gradle.com/terms-of-service"
        buildScan.termsOfServiceAgree = "yes"
    }
})();
